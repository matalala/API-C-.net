// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using LOGISTICA_BE.Entities;
using System.Data;


namespace LOGISTICA_DAL.Data
{
    public partial class LOGISTICAContext : DbContext
    {
        public LOGISTICAContext()
        {
        }

        public LOGISTICAContext(DbContextOptions<LOGISTICAContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CategoriasProducto> Categoria_Producto { get; set; }
        public virtual DbSet<UsuarioPerfil> UsuarioPerfil { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Deposito> Depositos { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=EDUARDO;Initial Catalog=VETLY;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CategoriasProducto>(entity =>
            {
                entity.ToTable("Categoria_Producto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.categoriaProducto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("categoriaProducto");
            });

            modelBuilder.Entity<UsuarioPerfil>(entity =>
            {
                entity.ToTable("Usuario_Perfil_Permisos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.email)
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnName("email");
                
                entity.Property(e => e.Tipo_Usuario)
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnName("Tipo_Usuario");

                entity.Property(e => e.Familias_Asignadas)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Familias_Asignadas");

                entity.Property(e => e.patentesIndividuales_Asignadas)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("patentesIndividuales_Asignadas");

                entity.Property(e => e.patentesPorFamilia_Asignadas)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("patentesPorFamilia_Asignadas");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.ToTable("Usuario");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.email)
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnName("email");

                entity.Property(e => e.id_tipo_Usuario).HasColumnName("id_tipo_Usuario");

                entity.Property(e => e.fecha_creacion).HasColumnType("date");

                entity.Property(e => e.borrado).HasColumnType("borrado");
                entity.Property(e => e.fecha_borrado).HasColumnType("date");


            });
            modelBuilder.Entity<Deposito>(entity =>
            {
                entity.ToTable("Deposito");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NombreDeposito)
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnName("email");

                entity.Property(e => e.IdLocalidad).HasColumnName("Id_Localidad");

                entity.Property(e => e.IdProvincia).HasColumnType("Id_Provincia");

                entity.Property(e => e.IdPais).HasColumnType("Id_Pais");

            });

            OnModelCreatingPartial(modelBuilder);
        }


        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}